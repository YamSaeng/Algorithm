#include <stdio.h>
#include <string>
#include <vector>
#include <stack>
#include <algorithm>

using namespace std;

//-----------------------------------------------------------------------------------------------------
//소수 만들기
//주어진 숫자 중 3개의 수를 더했을 때 소수가 되는 경우의 개수를 구하려고 합니다.
//숫자들이 들어있는 배열 nums가 매개변수로 주어질 때, nums에 있는 숫자들 중
//서로 다른 3개를 골라 더했을 때 소수가 되는 경우의 개수를 return 하도록 solution 함수를 완성해주세요.
//제한사항
//nums에 들어있는 수자의 개수는 3개 이상 50개 이하입니다.
//nums의 각 원소는 1 이상 1000 이하의 자연수이며, 중복된 숫자가 들어있지 않습니다.
//입출력 예
//[1,2,3,4]   1
//[1,2,7,6,4] 4
//입출력 예 설명
//입출력 예 #1
//[1,2,4]를 이용해서 7을 만들 수 있습니다.
//입출력 예 #2
//[1,2,4]를 이용해서 7을 만들 수 있습니다.
//[1,4,6]을 이용해서 11을 만들 수 있습니다.
//[2,4,7]을 이용해서 13을 만들 수 있습니다.
//[4,6,7]을 이용해서 17을 만들 수 있습니다.
//-----------------------------------------------------------------------------------------------------
int Solution(int* Nums, size_t Nums_len)
{
	int Count = 0;

	for (int i = 0; i < Nums_len - 2; i++)
	{
		for (int j = i + 1; j < Nums_len - 1; j++)
		{
			for (int k = j + 1; k < Nums_len; k++)
			{
				int Sum = Nums[i] + Nums[j] + Nums[k];

				bool IsPrimeNumber = true;
				for (int l = 2; l < Sum; l++)
				{
					if (Sum % l == 0)
					{
						IsPrimeNumber = false;
						break;
					}
				}

				if (IsPrimeNumber)
				{
					Count++;
				}
			}
		}
	}

	return Count;
}

void Prime()
{
	int Array[] = { 1,2,7,6,4 };
	int Len = 5;

	int PrimeNumCount = Solution(Array, Len);

	printf("%d", PrimeNumCount);
}

int main()
{
	Prime();

	return 0;
}